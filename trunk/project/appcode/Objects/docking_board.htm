<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\docking_board.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\docking_board.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Apr 01 10:22:57 2020
<BR><P>
<H3>Maximum Stack Usage =        600 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
utilEventHandlerTask &rArr; utilEventDispatch &rArr; appHdmiSwitcher_Switch_Input &rArr; halHdmiSwitcher_Ctrl &rArr; dvCard_System_Revision_Get &rArr; dvCard_Command_Read &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c7]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">MemManage_Handler</a><BR>
 <LI><a href="#[9]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">BusFault_Handler</a><BR>
 <LI><a href="#[a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">UsageFault_Handler</a><BR>
 <LI><a href="#[d]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">UnHandled_Vector</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">UnHandled_Vector</a><BR>
 <LI><a href="#[20]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC0_IRQHandler</a><BR>
 <LI><a href="#[11e]">Chip_Clock_GetDivRate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11c]">Chip_Clock_GetClockInputHz</a><BR>
 <LI><a href="#[11d]">Chip_Clock_GetMainPLLHz</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11c]">Chip_Clock_GetClockInputHz</a><BR>
 <LI><a href="#[53]">utilHostHandlerTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">utilHostHandlerTask</a><BR>
 <LI><a href="#[a1]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a1]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[24]">ADC1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[3b]">ADCHS_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[3c]">ATIMER_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[47]">Board_Uart_IRQHandler</a> from board_uart.o(i.Board_Uart_IRQHandler) referenced from board_uart.o(i.Board_Uart_Init)
 <LI><a href="#[9]">BusFault_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[40]">CAN0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[3a]">CAN1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[56]">CDC_ep0_override_hdlr</a> from cdc_vcom.o(i.CDC_ep0_override_hdlr) referenced from cdc_vcom.o(i.vcom_init)
 <LI><a href="#[4]">Chip_I2C_EventHandler</a> from i2c_18xx_43xx.o(i.Chip_I2C_EventHandler) referenced 4 times from i2c_18xx_43xx.o(.data)
 <LI><a href="#[4]">Chip_I2C_EventHandler</a> from i2c_18xx_43xx.o(i.Chip_I2C_EventHandler) referenced from board_i2c.o(i.Board_I2C_Init)
 <LI><a href="#[10]">DAC_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[12]">DMA_IRQHandler</a> from board_gpdma.o(i.DMA_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[d]">DebugMon_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[50]">EP0_patch</a> from cdc_main.o(i.EP0_patch) referenced from cdc_main.o(i.utilFunc_Usb_Task)
 <LI><a href="#[14]">ETH_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[39]">EVRT_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[13]">FLASH_EEPROM_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[37]">GINT0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[38]">GINT1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2f]">GPIO0_IRQHandler</a> from board_gpio.o(i.GPIO0_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[30]">GPIO1_IRQHandler</a> from board_gpio.o(i.GPIO1_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[31]">GPIO2_IRQHandler</a> from board_gpio.o(i.GPIO2_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[32]">GPIO3_IRQHandler</a> from board_gpio.o(i.GPIO3_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[33]">GPIO4_IRQHandler</a> from board_gpio.o(i.GPIO4_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[34]">GPIO5_IRQHandler</a> from board_gpio.o(i.GPIO5_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[35]">GPIO6_IRQHandler</a> from board_gpio.o(i.GPIO6_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[36]">GPIO7_IRQHandler</a> from board_gpio.o(i.GPIO7_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[21]">I2C0_IRQHandler</a> from board_i2c.o(i.I2C0_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[22]">I2C1_IRQHandler</a> from board_i2c.o(i.I2C1_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2b]">I2S0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2c]">I2S1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[16]">LCD_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[11]">M0APP_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[3f]">M0SUB_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[1f]">MCPWM_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from port.o(.emb_text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[41]">QEI_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[1a]">RIT_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[3d]">RTC_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[19]">SCT_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[15]">SDIO_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2e]">SGPIO_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2d]">SPIFI_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[23]">SPI_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[25]">SSP0_IRQHandler</a> from board_spi.o(i.SSP0_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[26]">SSP1_IRQHandler</a> from board_spi.o(i.SSP1_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[c]">SVC_Handler</a> from port.o(.emb_text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[f]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[42]">SystemInit</a> from sysinit.o(i.SystemInit) referenced from keil_startup_lpc18xx43xx.o(.text)
 <LI><a href="#[1b]">TIMER0_IRQHandler</a> from board_timer.o(i.TIMER0_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[1c]">TIMER1_IRQHandler</a> from board_timer.o(i.TIMER1_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[1d]">TIMER2_IRQHandler</a> from board_timer.o(i.TIMER2_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[1e]">TIMER3_IRQHandler</a> from board_timer.o(i.TIMER3_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[27]">UART0_IRQHandler</a> from board_uart.o(i.UART0_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[28]">UART1_IRQHandler</a> from board_uart.o(i.UART1_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[29]">UART2_IRQHandler</a> from board_uart.o(i.UART2_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2a]">UART3_IRQHandler</a> from board_uart.o(i.UART3_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[17]">USB0_IRQHandler</a> from cdc_main.o(i.USB0_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[18]">USB1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[b]">UnHandled_Vector</a> from keil_startup_lpc18xx43xx.o(.text) referenced 7 times from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[55]">VCOM_SetLineCode</a> from cdc_vcom.o(i.VCOM_SetLineCode) referenced from cdc_vcom.o(i.vcom_init)
 <LI><a href="#[57]">VCOM_bulk_in_hdlr</a> from cdc_vcom.o(i.VCOM_bulk_in_hdlr) referenced from cdc_vcom.o(i.vcom_init)
 <LI><a href="#[58]">VCOM_bulk_out_hdlr</a> from cdc_vcom.o(i.VCOM_bulk_out_hdlr) referenced from cdc_vcom.o(i.vcom_init)
 <LI><a href="#[3e]">WDT_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[68]">__main</a> from __main.o(!!!main) referenced from keil_startup_lpc18xx43xx.o(.text)
 <LI><a href="#[46]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[45]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[44]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[49]">appInputProc_BufferInsert</a> from appinputproc.o(i.appInputProc_BufferInsert) referenced from appinputproc.o(i.appInputProc_Init)
 <LI><a href="#[4d]">appMain_Task</a> from appsysmon.o(i.appMain_Task) referenced from main.o(i.main)
 <LI><a href="#[4b]">dvCard_Device_Read</a> from dvcard.o(i.dvCard_Device_Read) referenced from dvcard.o(i.dvCard_Initial)
 <LI><a href="#[4a]">dvCard_Device_Write</a> from dvcard.o(i.dvCard_Device_Write) referenced from dvcard.o(i.dvCard_Initial)
 <LI><a href="#[4c]">halInputCtrl_IR_PulseInsert</a> from halinputctrl.o(i.halInputCtrl_IR_PulseInsert) referenced from halinputctrl.o(i.halInputCtrl_Init)
 <LI><a href="#[54]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[4e]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[67]">utilCLI_Go_To_Bootloader</a> from utilclicmd.o(i.utilCLI_Go_To_Bootloader) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[66]">utilCLI_Input_AudioInfo_Get</a> from utilclicmd.o(i.utilCLI_Input_AudioInfo_Get) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[62]">utilCLI_Input_Source_Set</a> from utilclicmd.o(i.utilCLI_Input_Source_Set) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[65]">utilCLI_Input_Video_Format_Get</a> from utilclicmd.o(i.utilCLI_Input_Video_Format_Get) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[63]">utilCLI_Input_Video_Info_Get</a> from utilclicmd.o(i.utilCLI_Input_Video_Info_Get) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[64]">utilCLI_Input_Video_Timing_Get</a> from utilclicmd.o(i.utilCLI_Input_Video_Timing_Get) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[61]">utilCLI_OPS_Power_Get</a> from utilclicmd.o(i.utilCLI_OPS_Power_Get) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[60]">utilCLI_OPS_Power_Set</a> from utilclicmd.o(i.utilCLI_OPS_Power_Set) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[5d]">utilCLI_System_Card_Power_Get</a> from utilclicmd.o(i.utilCLI_System_Card_Power_Get) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[5a]">utilCLI_System_Card_Present_Get</a> from utilclicmd.o(i.utilCLI_System_Card_Present_Get) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[5b]">utilCLI_System_Ready_Get</a> from utilclicmd.o(i.utilCLI_System_Ready_Get) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[5e]">utilCLI_System_Slot_Info_Get</a> from utilclicmd.o(i.utilCLI_System_Slot_Info_Get) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[5c]">utilCLI_System_Slot_Power_Set</a> from utilclicmd.o(i.utilCLI_System_Slot_Power_Set) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[5f]">utilCLI_System_Slot_Ready_Get</a> from utilclicmd.o(i.utilCLI_System_Slot_Ready_Get) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[59]">utilCLI_System_Version_Get</a> from utilclicmd.o(i.utilCLI_System_Version_Get) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[4f]">utilEventHandlerTask</a> from utileventhandler.o(i.utilEventHandlerTask) referenced from utileventhandler.o(i.utilEventHandler_Init)
 <LI><a href="#[48]">utilFunc_Usb_Task</a> from cdc_main.o(i.utilFunc_Usb_Task) referenced from cdc_main.o(i.USB_CDC_Init)
 <LI><a href="#[53]">utilHostHandlerTask</a> from utilhost.o(i.utilHostHandlerTask) referenced from utilhost.o(i.utilHost_Init)
 <LI><a href="#[52]">utilHost_Device_Read</a> from utilhost.o(i.utilHost_Device_Read) referenced from utilhost.o(i.utilHost_Init)
 <LI><a href="#[51]">utilHost_Device_Write</a> from utilhost.o(i.utilHost_Device_Write) referenced from utilhost.o(i.utilHost_Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[68]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1c3]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1c4]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1c5]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1c6]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[6d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1c7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[6e]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[ae]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[70]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[72]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[74]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[75]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[76]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[1c8]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[78]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7a]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7b]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7c]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[7e]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[80]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[82]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[83]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[84]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[86]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[1c9]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[88]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[8a]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[8c]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[8e]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[1ca]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[9a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[90]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[92]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1cc]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1ce]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1cf]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[94]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1d0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1d1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[95]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1d2]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1d3]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1d4]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1d5]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1d6]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1d7]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1d8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1d9]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1da]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1db]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1dc]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1dd]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1de]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[9f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1df]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1e0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1e1]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1e2]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1e3]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1e4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1e5]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[6b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1e6]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[97]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[99]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1e7]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[9b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1e8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[c8]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[9e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1e9]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a0]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1bd]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1bc]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1ea]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UnHandled_Vector</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnHandled_Vector
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnHandled_Vector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ADCHS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ATIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EVRT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>FLASH_EEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>GINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>GINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2S1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>M0APP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>M0SUB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SGPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>USB1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaudFDR
</UL>

<P><STRONG><a name="[1eb]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
</UL>

<P><STRONG><a name="[a6]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[79]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[ac]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1af]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEvent_Send
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_PacketBuild
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Read
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_Slot_Info_Get
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Insert
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_bread
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_System_Slot_Info_Get
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Cmd_Execute
</UL>

<P><STRONG><a name="[af]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1ec]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Run_BootCode_Set
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_State_Reset
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_StateReset
</UL>

<P><STRONG><a name="[b3]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[b2]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1a4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilFunc_Usb_Task
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_init
</UL>

<P><STRONG><a name="[1ed]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1ef]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[a8]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[a9]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[aa]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ab]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[6f]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[a4]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[a5]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[44]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[89]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[8b]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[b6]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[81]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[b9]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[7d]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[85]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[ba]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[7f]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[87]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[71]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1f2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1f5]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c3]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[c4]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[8d]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[8f]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[b7]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[98]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[c5]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[93]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[c2]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[bc]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9d]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1f6]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1f7]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[bd]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ca]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[c9]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[cb]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[cc]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[be]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bf]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cd]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[ce]"></a>Board_Goto_BL_DeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, board.o(i.Board_Goto_BL_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Board_Goto_BL_DeInit &rArr; Board_I2C_DeInit &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_DeInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_DeInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_DeInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_DeInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GpioInt_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Run_BootCode_Set
</UL>

<P><STRONG><a name="[d3]"></a>Board_GpioInt_DeInit</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, board_gpio.o(i.Board_GpioInt_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Board_GpioInt_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Goto_BL_DeInit
</UL>

<P><STRONG><a name="[d5]"></a>Board_Gpio_Get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, board_gpio.o(i.Board_Gpio_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Board_Gpio_Get &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_OPS_Power_On_Get
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_Card_Detect
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_KeyPadGet
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilFunc_Usb_Task
</UL>

<P><STRONG><a name="[d7]"></a>Board_Gpio_Gima_PinMux</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, board_gpio.o(i.Board_Gpio_Gima_PinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Board_Gpio_Gima_PinMux &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_Init
</UL>

<P><STRONG><a name="[d8]"></a>Board_Gpio_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, board_gpio.o(i.Board_Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Board_Gpio_Init &rArr; Board_Gpio_PinMux &rArr; Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_PinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[d9]"></a>Board_Gpio_PinMux</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, board_gpio.o(i.Board_Gpio_PinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Board_Gpio_PinMux &rArr; Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIR
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Init
</UL>

<P><STRONG><a name="[db]"></a>Board_Gpio_Set</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, board_gpio.o(i.Board_Gpio_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_OPS_Power_Check
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBoard_Slot_Power_Rail_Enable
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBoard_PwrSeqSet
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBoard_OPS_Power_Rail_Enable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_PinMux
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Master_Write
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Master_Read
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_OPS_Power_Set
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halHdmiSwitcher_LED_Ctrl
</UL>

<P><STRONG><a name="[d1]"></a>Board_I2C_DeInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, board_i2c.o(i.Board_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Board_I2C_DeInit &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Goto_BL_DeInit
</UL>

<P><STRONG><a name="[e2]"></a>Board_I2C_Enable_SlaveMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, board_i2c.o(i.Board_I2C_Enable_SlaveMode))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
</UL>

<P><STRONG><a name="[dd]"></a>Board_I2C_Init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, board_i2c.o(i.Board_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Board_I2C_Init &rArr; Board_I2C_SlaveAdd_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_SetMasterEventHandler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_SetBusSpeed
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Enable_SlaveMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_SlaveAdd_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[eb]"></a>Board_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, board.o(i.Board_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Board_Init &rArr; Board_Gpio_Init &rArr; Board_Gpio_PinMux &rArr; Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_RGU_Reset
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBoard_Init
</UL>

<P><STRONG><a name="[d2]"></a>Board_SSP_DeInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, board_spi.o(i.Board_SSP_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Board_SSP_DeInit &rArr; Chip_SSP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Goto_BL_DeInit
</UL>

<P><STRONG><a name="[f1]"></a>Board_SSP_IRQ_Handler</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, board_spi.o(i.Board_SSP_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Board_SSP_IRQ_Handler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaitingFromISR
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_GetStatus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_GetRawIntStatus
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>Board_SSP_Init</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, board_spi.o(i.Board_SSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Board_SSP_Init &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_SetBitRate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[fa]"></a>Board_SSP_Master_Read</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, board_spi.o(i.Board_SSP_Master_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Board_SSP_Master_Read &rArr; Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Set
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_ReadFrames_Blocking
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Device_Read
</UL>

<P><STRONG><a name="[fe]"></a>Board_SSP_Master_Write</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, board_spi.o(i.Board_SSP_Master_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Board_SSP_Master_Write &rArr; Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_WriteFrames_Blocking
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Device_Write
</UL>

<P><STRONG><a name="[100]"></a>Board_SSP_Slave_Read</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, board_spi.o(i.Board_SSP_Slave_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Board_SSP_Slave_Read &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Device_Read
</UL>

<P><STRONG><a name="[102]"></a>Board_SSP_Slave_Write</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, board_spi.o(i.Board_SSP_Slave_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Board_SSP_Slave_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Device_Write
</UL>

<P><STRONG><a name="[cf]"></a>Board_Timer_DeInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, board_timer.o(i.Board_Timer_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Board_Timer_DeInit &rArr; Chip_TIMER_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Goto_BL_DeInit
</UL>

<P><STRONG><a name="[ed]"></a>Board_Timer_Init</STRONG> (Thumb, 694 bytes, Stack size 32 bytes, board_timer.o(i.Board_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Board_Timer_Init &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_Reset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_ExtMatchControlSet
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetRate
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_ResetOnMatchEnable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_MatchEnableInt
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_CaptureRisingEdgeEnable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_CaptureRisingEdgeDisable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_CaptureFallingEdgeEnable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_CaptureFallingEdgeDisable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[ec]"></a>Board_Timer_RGU_Reset</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, board_timer.o(i.Board_Timer_RGU_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Board_Timer_RGU_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_RGU_TriggerReset
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_RGU_InReset
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[17a]"></a>Board_Timer_Register_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board_timer.o(i.Board_Timer_Register_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_Init
</UL>

<P><STRONG><a name="[d0]"></a>Board_Uart_DeInit</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, board_uart.o(i.Board_Uart_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Board_Uart_DeInit &rArr; Chip_UART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Goto_BL_DeInit
</UL>

<P><STRONG><a name="[ee]"></a>Board_Uart_Init</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, board_uart.o(i.Board_Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Board_Uart_Init &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaudFDR
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_RGU_TriggerReset
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_RGU_InReset
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[118]"></a>Board_Uart_Read</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, board_uart.o(i.Board_Uart_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Board_Uart_Read &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilFunc_Usb_Task
</UL>

<P><STRONG><a name="[119]"></a>Board_Uart_Write</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, board_uart.o(i.Board_Uart_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilFunc_Usb_Task
</UL>

<P><STRONG><a name="[122]"></a>Chip_Clock_Disable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_DeInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_DeInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_DeInit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_DeInit
</UL>

<P><STRONG><a name="[123]"></a>Chip_Clock_Enable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_Init
</UL>

<P><STRONG><a name="[12d]"></a>Chip_Clock_EnableBaseClock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_EnableBaseClock))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB0_Init
</UL>

<P><STRONG><a name="[129]"></a>Chip_Clock_EnableOpts</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_EnableOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_Clock_EnableOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB0_Init
</UL>

<P><STRONG><a name="[12f]"></a>Chip_Clock_EnablePLL</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_EnablePLL))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB_PllSetup
</UL>

<P><STRONG><a name="[11b]"></a>Chip_Clock_GetBaseClock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetBaseClock))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetBaseClocktHz
</UL>

<P><STRONG><a name="[11a]"></a>Chip_Clock_GetBaseClocktHz</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetBaseClocktHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetBaseClock
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetRate
</UL>

<P><STRONG><a name="[11c]"></a>Chip_Clock_GetClockInputHz</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetClockInputHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDivRate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainPLLHz
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDivRate
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB_PllSetup
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainPLLHz
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetBaseClocktHz
</UL>

<P><STRONG><a name="[120]"></a>Chip_Clock_GetDividerDivisor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetDividerDivisor))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDivRate
</UL>

<P><STRONG><a name="[11f]"></a>Chip_Clock_GetDividerSource</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetDividerSource))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDivRate
</UL>

<P><STRONG><a name="[11d]"></a>Chip_Clock_GetMainPLLHz</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetMainPLLHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>

<P><STRONG><a name="[130]"></a>Chip_Clock_GetPLLStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetPLLStatus))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB_PllSetup
</UL>

<P><STRONG><a name="[105]"></a>Chip_Clock_GetRate</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetBaseClocktHz
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_SetBitRate
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_SetBusSpeed
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaudFDR
</UL>

<P><STRONG><a name="[12c]"></a>Chip_Clock_SetBaseClock</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, clock_18xx_43xx.o(i.Chip_Clock_SetBaseClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_Clock_SetBaseClock
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB0_Init
</UL>

<P><STRONG><a name="[12e]"></a>Chip_Clock_SetupPLL</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_SetupPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_Clock_SetupPLL
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB_PllSetup
</UL>

<P><STRONG><a name="[da]"></a>Chip_GPIO_SetPinDIR</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpio_18xx_43xx.o(i.Chip_GPIO_SetPinDIR))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_PinMux
</UL>

<P><STRONG><a name="[dc]"></a>Chip_I2CM_DeInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, i2cm_18xx_43xx.o(i.Chip_I2CM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_I2CM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cm_getClkId
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_DeInit
</UL>

<P><STRONG><a name="[df]"></a>Chip_I2CM_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, i2cm_18xx_43xx.o(i.Chip_I2CM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_I2CM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cm_getClkId
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
</UL>

<P><STRONG><a name="[e0]"></a>Chip_I2CM_SetBusSpeed</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, i2cm_18xx_43xx.o(i.Chip_I2CM_SetBusSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Chip_I2CM_SetBusSpeed &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetRate
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cm_getClkId
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
</UL>

<P><STRONG><a name="[132]"></a>Chip_I2CM_XferHandler</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, i2cm_18xx_43xx.o(i.Chip_I2CM_XferHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_I2CM_XferHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[4]"></a>Chip_I2C_EventHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2c_18xx_43xx.o(i.Chip_I2C_EventHandler))
<BR>[Address Reference Count : 2]<UL><LI> board_i2c.o(i.Board_I2C_Init)
<LI> i2c_18xx_43xx.o(.data)
</UL>
<P><STRONG><a name="[e6]"></a>Chip_I2C_SetMasterEventHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, i2c_18xx_43xx.o(i.Chip_I2C_SetMasterEventHandler))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
</UL>

<P><STRONG><a name="[112]"></a>Chip_RGU_InReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rgu_18xx_43xx.o(i.Chip_RGU_InReset))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_RGU_Reset
</UL>

<P><STRONG><a name="[111]"></a>Chip_RGU_TriggerReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rgu_18xx_43xx.o(i.Chip_RGU_TriggerReset))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_RGU_Reset
</UL>

<P><STRONG><a name="[f0]"></a>Chip_SSP_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ssp_18xx_43xx.o(i.Chip_SSP_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_SSP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_GetClockIndex
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_DeInit
</UL>

<P><STRONG><a name="[f7]"></a>Chip_SSP_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ssp_18xx_43xx.o(i.Chip_SSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Chip_SSP_Init &rArr; Chip_SSP_SetBitRate &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_SetBitRate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_GetClockIndex
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Init
</UL>

<P><STRONG><a name="[fc]"></a>Chip_SSP_ReadFrames_Blocking</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, ssp_18xx_43xx.o(i.Chip_SSP_ReadFrames_Blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chip_SSP_ReadFrames_Blocking
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_GetStatus
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_GetRawIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Master_Read
</UL>

<P><STRONG><a name="[f8]"></a>Chip_SSP_SetBitRate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ssp_18xx_43xx.o(i.Chip_SSP_SetBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Chip_SSP_SetBitRate &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetRate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_GetClockIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_Init
</UL>

<P><STRONG><a name="[1f8]"></a>Chip_SSP_SetClockRate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssp_18xx_43xx.o(i.Chip_SSP_SetClockRate), UNUSED)

<P><STRONG><a name="[ff]"></a>Chip_SSP_WriteFrames_Blocking</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ssp_18xx_43xx.o(i.Chip_SSP_WriteFrames_Blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chip_SSP_WriteFrames_Blocking
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_GetStatus
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_GetRawIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Master_Write
</UL>

<P><STRONG><a name="[104]"></a>Chip_TIMER_DeInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer_18xx_43xx.o(i.Chip_TIMER_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_TIMER_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_GetClockIndex
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_DeInit
</UL>

<P><STRONG><a name="[10f]"></a>Chip_TIMER_ExtMatchControlSet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timer_18xx_43xx.o(i.Chip_TIMER_ExtMatchControlSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_TIMER_ExtMatchControlSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_Init
</UL>

<P><STRONG><a name="[106]"></a>Chip_TIMER_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer_18xx_43xx.o(i.Chip_TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_TIMER_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_GetClockIndex
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_Init
</UL>

<P><STRONG><a name="[109]"></a>Chip_TIMER_Reset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer_18xx_43xx.o(i.Chip_TIMER_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_Init
</UL>

<P><STRONG><a name="[115]"></a>Chip_UART_ABIntHandler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, uart_18xx_43xx.o(i.Chip_UART_ABIntHandler))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>Chip_UART_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart_18xx_43xx.o(i.Chip_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_UART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_GetIndex
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_DeInit
</UL>

<P><STRONG><a name="[116]"></a>Chip_UART_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart_18xx_43xx.o(i.Chip_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chip_UART_Init &rArr; Chip_Clock_EnableOpts
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnableOpts
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_GetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Init
</UL>

<P><STRONG><a name="[117]"></a>Chip_UART_SetBaudFDR</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, uart_18xx_43xx.o(i.Chip_UART_SetBaudFDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Chip_UART_SetBaudFDR &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetRate
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_GetIndex
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Init
</UL>

<P><STRONG><a name="[12a]"></a>Chip_USB0_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, chip_18xx_43xx.o(i.Chip_USB0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Chip_USB0_Init &rArr; Chip_USB_PllSetup &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetBaseClock
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnableOpts
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnableBaseClock
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB_PllSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilFunc_Usb_Task
</UL>

<P><STRONG><a name="[12]"></a>DMA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_gpdma.o(i.DMA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>EP0_patch</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cdc_main.o(i.EP0_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EP0_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_main.o(i.utilFunc_Usb_Task)
</UL>
<P><STRONG><a name="[2f]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_gpio.o(i.GPIO0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO0_IRQHandler &rArr; GPIO_Interrupt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_gpio.o(i.GPIO1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO1_IRQHandler &rArr; GPIO_Interrupt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>GPIO2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_gpio.o(i.GPIO2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO2_IRQHandler &rArr; GPIO_Interrupt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>GPIO3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_gpio.o(i.GPIO3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO3_IRQHandler &rArr; GPIO_Interrupt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>GPIO4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_gpio.o(i.GPIO4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO4_IRQHandler &rArr; GPIO_Interrupt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>GPIO5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_gpio.o(i.GPIO5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO5_IRQHandler &rArr; GPIO_Interrupt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>GPIO6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_gpio.o(i.GPIO6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO6_IRQHandler &rArr; GPIO_Interrupt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>GPIO7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_gpio.o(i.GPIO7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C0_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, board_i2c.o(i.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C0_IRQHandler &rArr; Board_I2C_SlaveStateHandler &rArr; RingBuffer_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_XferHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_SlaveStateHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, board_i2c.o(i.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C1_IRQHandler &rArr; Board_I2C_SlaveStateHandler &rArr; RingBuffer_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_XferHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_SlaveStateHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>RingBuffer_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ring_buffer.o(i.RingBuffer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
</UL>

<P><STRONG><a name="[e9]"></a>RingBuffer_Insert</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ring_buffer.o(i.RingBuffer_Insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBuffer_Insert
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsFull
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_SlaveStateHandler
</UL>

<P><STRONG><a name="[ea]"></a>RingBuffer_Pop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ring_buffer.o(i.RingBuffer_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBuffer_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsEmpty
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_SlaveStateHandler
</UL>

<P><STRONG><a name="[25]"></a>SSP0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_spi.o(i.SSP0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SSP0_IRQHandler &rArr; Board_SSP_IRQ_Handler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SSP1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_spi.o(i.SSP1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SSP1_IRQHandler &rArr; Board_SSP_IRQ_Handler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[137]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, chip_18xx_43xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemCoreClockUpdate &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetRate
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>SystemInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sysinit.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; fpuInit
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpuInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_timer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = TIMER0_IRQHandler &rArr; TIMER_IRQHandler &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = TIMER1_IRQHandler &rArr; TIMER_IRQHandler &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_timer.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = TIMER2_IRQHandler &rArr; TIMER_IRQHandler &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_timer.o(i.TIMER3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[139]"></a>TIMER_IRQHandler</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, board_timer.o(i.TIMER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = TIMER_IRQHandler &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_MatchPending
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_CapturePending
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[27]"></a>UART0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board_uart.o(i.UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>UART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board_uart.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>UART2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board_uart.o(i.UART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UART3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board_uart.o(i.UART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>USB0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cdc_main.o(i.USB0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[13c]"></a>USB_CDC_Init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, cdc_main.o(i.USB_CDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = USB_CDC_Init &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEventDispatch
</UL>

<P><STRONG><a name="[c1]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[69]"></a>__user_heap_extend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, freertoscommonhooks.o(i.__user_heap_extend), UNUSED, KEPT)

<P><STRONG><a name="[ad]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[a1]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utillog.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[13e]"></a>appHdmiSwitcher_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, apphdmiswitcher.o(i.appHdmiSwitcher_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = appHdmiSwitcher_Init &rArr; halHdmiSwitcher_Init &rArr; halHdmiSwitcher_LED_Ctrl &rArr; Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halHdmiSwitcher_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEventDispatch
</UL>

<P><STRONG><a name="[140]"></a>appHdmiSwitcher_Switch_Input</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, apphdmiswitcher.o(i.appHdmiSwitcher_Switch_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = appHdmiSwitcher_Switch_Input &rArr; halHdmiSwitcher_Ctrl &rArr; dvCard_System_Revision_Get &rArr; dvCard_Command_Read &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halHdmiSwitcher_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEventDispatch
</UL>

<P><STRONG><a name="[142]"></a>appIapProc_Run_BootCode_Set</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, appiapproc.o(i.appIapProc_Run_BootCode_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = appIapProc_Run_BootCode_Set &rArr; Board_Goto_BL_DeInit &rArr; Board_I2C_DeInit &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Goto_BL_DeInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEventDispatch
</UL>

<P><STRONG><a name="[49]"></a>appInputProc_BufferInsert</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, appinputproc.o(i.appInputProc_BufferInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = appInputProc_BufferInsert &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appinputproc.o(i.appInputProc_Init)
</UL>
<P><STRONG><a name="[143]"></a>appInputProc_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, appinputproc.o(i.appInputProc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = appInputProc_Init &rArr; halInputCtrl_Init &rArr; Board_Gpio_Gima_PinMux &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_Register_Callback
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_CustomId_Set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMain_Task
</UL>

<P><STRONG><a name="[147]"></a>appInputProc_Process</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, appinputproc.o(i.appInputProc_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = appInputProc_Process &rArr; halInputCtrl_IR_Decode &rArr; halInputCtrl_IR_DataGet &rArr; halInputCtrl_Proc &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_KeyPad_Decode
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_Decode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEvent_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMain_Task
</UL>

<P><STRONG><a name="[4d]"></a>appMain_Task</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, appsysmon.o(i.appMain_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = appMain_Task &rArr; appSysProc_Process &rArr; halCard_Slot_Ready_Check &rArr; halCard_Card_Ready &rArr; dvCard_System_Ready_Get &rArr; dvCard_Command_Read &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilFunc_Test_Loop
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEventHandler_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBoard_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appInputProc_Process
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appInputProc_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_Process
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[19b]"></a>appSysProc_Card_Power_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appsysmon.o(i.appSysProc_Card_Power_Get))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_System_Card_Power_Get
</UL>

<P><STRONG><a name="[152]"></a>appSysProc_Card_Power_Set</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, appsysmon.o(i.appSysProc_Card_Power_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = appSysProc_Card_Power_Set &rArr; halBoard_Slot_Power_Rail_Enable &rArr; Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_Slot_Check_Set
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBoard_Slot_Power_Rail_Enable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBoard_OPS_Power_Rail_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEventDispatch
</UL>

<P><STRONG><a name="[19a]"></a>appSysProc_Card_Power_Status_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appsysmon.o(i.appSysProc_Card_Power_Status_Get))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_OPS_Power_Get
</UL>

<P><STRONG><a name="[19c]"></a>appSysProc_Card_Present_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appsysmon.o(i.appSysProc_Card_Present_Get))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_System_Card_Present_Get
</UL>

<P><STRONG><a name="[14f]"></a>appSysProc_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, appsysmon.o(i.appSysProc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = appSysProc_Init &rArr; appSysProc_State_Set &rArr; utilEvent_Send &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_State_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMain_Task
</UL>

<P><STRONG><a name="[150]"></a>appSysProc_Process</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, appsysmon.o(i.appSysProc_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = appSysProc_Process &rArr; halCard_Slot_Ready_Check &rArr; halCard_Card_Ready &rArr; dvCard_System_Ready_Get &rArr; dvCard_Command_Read &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_Slot_Ready_Check
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_OPS_Power_On_Get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_OPS_Power_Check
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_Card_Detect
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_State_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMain_Task
</UL>

<P><STRONG><a name="[19d]"></a>appSysProc_State_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appsysmon.o(i.appSysProc_State_Get))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_System_Ready_Get
</UL>

<P><STRONG><a name="[156]"></a>appSysProc_State_Set</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, appsysmon.o(i.appSysProc_State_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = appSysProc_State_Set &rArr; utilEvent_Send &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEvent_Send
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBoard_PwrSeqSet
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_Process
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEventDispatch
</UL>

<P><STRONG><a name="[15d]"></a>dvCard_Audio_Info_Get</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dvcard.o(i.dvCard_Audio_Info_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = dvCard_Audio_Info_Get &rArr; dvCard_Command_Read &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halHdmiSwitcher_Ctrl
</UL>

<P><STRONG><a name="[166]"></a>dvCard_Initial</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dvcard.o(i.dvCard_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dvCard_Initial &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_State_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_Init
</UL>

<P><STRONG><a name="[167]"></a>dvCard_Input_Port_Set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dvcard.o(i.dvCard_Input_Port_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = dvCard_Input_Port_Set &rArr; dvCard_Command_Write &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halHdmiSwitcher_Ctrl
</UL>

<P><STRONG><a name="[168]"></a>dvCard_Slot_Info_Get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dvcard.o(i.dvCard_Slot_Info_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = dvCard_Slot_Info_Get &rArr; dvCard_Command_Read &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halHdmiSwitcher_Ctrl
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_Card_Ready
</UL>

<P><STRONG><a name="[16a]"></a>dvCard_System_Ready_Get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dvcard.o(i.dvCard_System_Ready_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = dvCard_System_Ready_Get &rArr; dvCard_Command_Read &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_Card_Ready
</UL>

<P><STRONG><a name="[16b]"></a>dvCard_System_Revision_Get</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dvcard.o(i.dvCard_System_Revision_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = dvCard_System_Revision_Get &rArr; dvCard_Command_Read &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halHdmiSwitcher_Ctrl
</UL>

<P><STRONG><a name="[16c]"></a>dvCard_Video_Format_Get</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, dvcard.o(i.dvCard_Video_Format_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = dvCard_Video_Format_Get &rArr; dvCard_Command_Read &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halHdmiSwitcher_Ctrl
</UL>

<P><STRONG><a name="[16d]"></a>dvCard_Video_Info_Get</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, dvcard.o(i.dvCard_Video_Info_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = dvCard_Video_Info_Get &rArr; dvCard_Command_Read &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halHdmiSwitcher_Ctrl
</UL>

<P><STRONG><a name="[16e]"></a>dvCard_Video_Timing_Get</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dvcard.o(i.dvCard_Video_Timing_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = dvCard_Video_Timing_Get &rArr; dvCard_Command_Read &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halHdmiSwitcher_Ctrl
</UL>

<P><STRONG><a name="[1b0]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[1ba]"></a>find_IntfDesc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cdc_main.o(i.find_IntfDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_IntfDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_init
</UL>

<P><STRONG><a name="[138]"></a>fpuInit</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, fpu_init.o(i.fpuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fpuInit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[14b]"></a>halBoard_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, halboard.o(i.halBoard_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = halBoard_Init &rArr; Board_Init &rArr; Board_Gpio_Init &rArr; Board_Gpio_PinMux &rArr; Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMain_Task
</UL>

<P><STRONG><a name="[153]"></a>halBoard_OPS_Power_Rail_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, halboard.o(i.halBoard_OPS_Power_Rail_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = halBoard_OPS_Power_Rail_Enable &rArr; Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_Card_Power_Set
</UL>

<P><STRONG><a name="[15b]"></a>halBoard_PwrSeqSet</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, halboard.o(i.halBoard_PwrSeqSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = halBoard_PwrSeqSet &rArr; Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilDelayMs
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_State_Set
</UL>

<P><STRONG><a name="[154]"></a>halBoard_Slot_Power_Rail_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, halboard.o(i.halBoard_Slot_Power_Rail_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = halBoard_Slot_Power_Rail_Enable &rArr; Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_Card_Power_Set
</UL>

<P><STRONG><a name="[157]"></a>halCard_Card_Detect</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, halcard.o(i.halCard_Card_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = halCard_Card_Detect &rArr; Board_Gpio_Get &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilDelayMs
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_Process
</UL>

<P><STRONG><a name="[16f]"></a>halCard_Card_Ready</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, halcard.o(i.halCard_Card_Ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = halCard_Card_Ready &rArr; dvCard_System_Ready_Get &rArr; dvCard_Command_Read &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_System_Ready_Get
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Slot_Info_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_Slot_Ready_Check
</UL>

<P><STRONG><a name="[15c]"></a>halCard_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, halcard.o(i.halCard_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = halCard_Init &rArr; dvCard_Initial &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Initial
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_State_Set
</UL>

<P><STRONG><a name="[15a]"></a>halCard_OPS_Power_Check</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, halcard.o(i.halCard_OPS_Power_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = halCard_OPS_Power_Check &rArr; Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Set
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterGet
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_Process
</UL>

<P><STRONG><a name="[159]"></a>halCard_OPS_Power_On_Get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, halcard.o(i.halCard_OPS_Power_On_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = halCard_OPS_Power_On_Get &rArr; Board_Gpio_Get &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_Process
</UL>

<P><STRONG><a name="[170]"></a>halCard_OPS_Power_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, halcard.o(i.halCard_OPS_Power_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = halCard_OPS_Power_Set &rArr; Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Set
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEventDispatch
</UL>

<P><STRONG><a name="[155]"></a>halCard_Slot_Check_Set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, halcard.o(i.halCard_Slot_Check_Set))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_Card_Power_Set
</UL>

<P><STRONG><a name="[171]"></a>halCard_Slot_Info_Get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, halcard.o(i.halCard_Slot_Info_Get))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_System_Slot_Info_Get
</UL>

<P><STRONG><a name="[172]"></a>halCard_Slot_Input_Numbers_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, halcard.o(i.halCard_Slot_Input_Numbers_Get))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halHdmiSwitcher_Ctrl
</UL>

<P><STRONG><a name="[158]"></a>halCard_Slot_Ready_Check</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, halcard.o(i.halCard_Slot_Ready_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = halCard_Slot_Ready_Check &rArr; halCard_Card_Ready &rArr; dvCard_System_Ready_Get &rArr; dvCard_Command_Read &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_Card_Ready
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterSet
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterGet
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_Process
</UL>

<P><STRONG><a name="[19e]"></a>halCard_Slot_Ready_Get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, halcard.o(i.halCard_Slot_Ready_Get))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_System_Slot_Ready_Get
</UL>

<P><STRONG><a name="[141]"></a>halHdmiSwitcher_Ctrl</STRONG> (Thumb, 152 bytes, Stack size 136 bytes, halhdmiswitcher.o(i.halHdmiSwitcher_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = halHdmiSwitcher_Ctrl &rArr; dvCard_System_Revision_Get &rArr; dvCard_Command_Read &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_Slot_Input_Numbers_Get
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Video_Timing_Get
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Video_Info_Get
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Video_Format_Get
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_System_Revision_Get
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Slot_Info_Get
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Input_Port_Set
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Audio_Info_Get
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halHdmiSwitcher_LED_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appHdmiSwitcher_Switch_Input
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEventDispatch
</UL>

<P><STRONG><a name="[13f]"></a>halHdmiSwitcher_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, halhdmiswitcher.o(i.halHdmiSwitcher_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = halHdmiSwitcher_Init &rArr; halHdmiSwitcher_LED_Ctrl &rArr; Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halHdmiSwitcher_LED_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appHdmiSwitcher_Init
</UL>

<P><STRONG><a name="[144]"></a>halInputCtrl_IR_CustomId_Set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, halinputctrl.o(i.halInputCtrl_IR_CustomId_Set))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appInputProc_Init
</UL>

<P><STRONG><a name="[174]"></a>halInputCtrl_IR_DataGet</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, halinputctrl.o(i.halInputCtrl_IR_DataGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = halInputCtrl_IR_DataGet &rArr; halInputCtrl_Proc &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_Decode
</UL>

<P><STRONG><a name="[149]"></a>halInputCtrl_IR_Decode</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, halinputctrl.o(i.halInputCtrl_IR_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = halInputCtrl_IR_Decode &rArr; halInputCtrl_IR_DataGet &rArr; halInputCtrl_Proc &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterSet
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterGet
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_Proc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_Restart
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_HeadGet
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_Flush
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_DataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appInputProc_Process
</UL>

<P><STRONG><a name="[179]"></a>halInputCtrl_IR_Flush</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, halinputctrl.o(i.halInputCtrl_IR_Flush))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_Decode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_Restart
</UL>

<P><STRONG><a name="[178]"></a>halInputCtrl_IR_HeadGet</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, halinputctrl.o(i.halInputCtrl_IR_HeadGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = halInputCtrl_IR_HeadGet &rArr; halInputCtrl_Proc &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterSet
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_Decode
</UL>

<P><STRONG><a name="[4c]"></a>halInputCtrl_IR_PulseInsert</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, halinputctrl.o(i.halInputCtrl_IR_PulseInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = halInputCtrl_IR_PulseInsert &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> halinputctrl.o(i.halInputCtrl_Init)
</UL>
<P><STRONG><a name="[177]"></a>halInputCtrl_IR_Restart</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, halinputctrl.o(i.halInputCtrl_IR_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = halInputCtrl_IR_Restart
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_Decode
</UL>

<P><STRONG><a name="[145]"></a>halInputCtrl_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, halinputctrl.o(i.halInputCtrl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = halInputCtrl_Init &rArr; Board_Gpio_Gima_PinMux &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_Register_Callback
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Gima_PinMux
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_Restart
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appInputProc_Init
</UL>

<P><STRONG><a name="[17b]"></a>halInputCtrl_KeyPadGet</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, halinputctrl.o(i.halInputCtrl_KeyPadGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = halInputCtrl_KeyPadGet &rArr; Board_Gpio_Get &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_KeyPad_Decode
</UL>

<P><STRONG><a name="[148]"></a>halInputCtrl_KeyPad_Decode</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, halinputctrl.o(i.halInputCtrl_KeyPad_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = halInputCtrl_KeyPad_Decode &rArr; halInputCtrl_Proc &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterSet
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterGet
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_Proc
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_KeyPadGet
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appInputProc_Process
</UL>

<P><STRONG><a name="[175]"></a>halInputCtrl_Proc</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, halinputctrl.o(i.halInputCtrl_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = halInputCtrl_Proc &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_KeyPad_Decode
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_Decode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_HeadGet
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_DataGet
</UL>

<P><STRONG><a name="[146]"></a>halInputCtrl_Register_Callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, halinputctrl.o(i.halInputCtrl_Register_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appInputProc_Init
</UL>

<P><STRONG><a name="[9c]"></a>main</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1bf]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[192]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[199]"></a>utilCLICmd_Execute</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, utilclicmd.o(i.utilCLICmd_Execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = utilCLICmd_Execute &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Cmd_Execute
</UL>

<P><STRONG><a name="[164]"></a>utilCounterGet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, utilcounter.o(i.utilCounterGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = utilCounterGet &rArr; xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_KeyPad_Decode
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_Decode
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilFunc_Test_Loop
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_Slot_Ready_Check
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_OPS_Power_Check
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Read
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilFunc_Usb_Task
</UL>

<P><STRONG><a name="[162]"></a>utilCounterSet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, utilcounter.o(i.utilCounterSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utilCounterSet &rArr; vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_KeyPad_Decode
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_Decode
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilFunc_Test_Loop
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_Slot_Ready_Check
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Read
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_OPS_Power_Set
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_HeadGet
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilFunc_Usb_Task
</UL>

<P><STRONG><a name="[161]"></a>utilDelayMs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, utilcounter.o(i.utilDelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = utilDelayMs &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_Card_Detect
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBoard_PwrSeqSet
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Read
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEventDispatch
</UL>

<P><STRONG><a name="[14d]"></a>utilEventHandler_Init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, utileventhandler.o(i.utilEventHandler_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = utilEventHandler_Init &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMain_Task
</UL>

<P><STRONG><a name="[14a]"></a>utilEvent_Send</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, utileventhandler.o(i.utilEvent_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = utilEvent_Send &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appInputProc_Process
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_State_Set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_System_Slot_Power_Set
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_OPS_Power_Set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_Input_Source_Set
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_Go_To_Bootloader
</UL>

<P><STRONG><a name="[151]"></a>utilFunc_Test_Loop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, utilfunctester.o(i.utilFunc_Test_Loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = utilFunc_Test_Loop &rArr; utilCounterGet &rArr; xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterSet
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterGet
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMain_Task
</UL>

<P><STRONG><a name="[48]"></a>utilFunc_Usb_Task</STRONG> (Thumb, 276 bytes, Stack size 88 bytes, cdc_main.o(i.utilFunc_Usb_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = utilFunc_Usb_Task &rArr; Board_Gpio_Get &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Read
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterSet
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterGet
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Get
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Write
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB0_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_bread
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_main.o(i.USB_CDC_Init)
</UL>
<P><STRONG><a name="[53]"></a>utilHostHandlerTask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utilhost.o(i.utilHostHandlerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = utilHostHandlerTask &rArr;  utilHostHandlerTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHostHandlerTask
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Packet_UnPack
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHostHandlerTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilhost.o(i.utilHost_Init)
</UL>
<P><STRONG><a name="[14e]"></a>utilHost_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, utilhost.o(i.utilHost_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = utilHost_Init &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_StateReset
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMain_Task
</UL>

<P><STRONG><a name="[160]"></a>utilHost_PacketBuild</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, utilhost.o(i.utilHost_PacketBuild))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = utilHost_PacketBuild &rArr; utilHost_CheckSumCalc
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_CheckSumCalc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Read
</UL>

<P><STRONG><a name="[163]"></a>utilHost_StateProcess</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, utilhost.o(i.utilHost_StateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Package_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Read
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Packet_UnPack
</UL>

<P><STRONG><a name="[14c]"></a>utilLog_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, utillog.o(i.utilLog_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = utilLog_Init &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMain_Task
</UL>

<P><STRONG><a name="[d6]"></a>utilLog_Printf</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, utillog.o(i.utilLog_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Write
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halHdmiSwitcher_Ctrl
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_Decode
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appInputProc_BufferInsert
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEvent_Send
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEventHandler_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appInputProc_Process
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appInputProc_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_Process
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMain_Task
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_DeInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_StateProcess
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Read
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_System_Ready_Get
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Video_Timing_Get
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Video_Info_Get
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Video_Format_Get
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_System_Revision_Get
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Slot_Info_Get
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Input_Port_Set
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Audio_Info_Get
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Set
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Gima_PinMux
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Get
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_Proc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_DataGet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEventDispatch
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_SlaveAdd_Set
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilFunc_Usb_Task
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_System_Version_Get
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_System_Slot_Ready_Get
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_System_Slot_Power_Set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_System_Slot_Info_Get
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_System_Ready_Get
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_System_Card_Present_Get
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_System_Card_Power_Get
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_OPS_Power_Set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_OPS_Power_Get
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_Input_Source_Set
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_Go_To_Bootloader
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLICmd_Execute
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Packet_UnPack
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Package_Print
</UL>

<P><STRONG><a name="[17e]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[103]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, queue.o(i.uxQueueMessagesWaiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uxQueueMessagesWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Write
</UL>

<P><STRONG><a name="[f5]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(i.uxQueueMessagesWaitingFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_IRQ_Handler
</UL>

<P><STRONG><a name="[1b4]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utiltask.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[189]"></a>vApplicationIdleHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, freertoscommonhooks.o(i.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1b7]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, freertoscommonhooks.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[193]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[191]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[180]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[17f]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[182]"></a>vPortEnterCritical</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[184]"></a>vPortExitCritical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1bb]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[18c]"></a>vPortSuppressTicksAndSleep</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, port.o(i.vPortSuppressTicksAndSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPortSuppressTicksAndSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1a2]"></a>vTaskDelayUntil</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tasks.o(i.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilDelayMs
</UL>

<P><STRONG><a name="[1be]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[198]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1b2]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1b3]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1a0]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterSet
</UL>

<P><STRONG><a name="[17c]"></a>vTaskStartScheduler</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b1]"></a>vTaskStepTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskStepTick))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[1ae]"></a>vTaskSuspend</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, tasks.o(i.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskSuspend &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_StateProcess
</UL>

<P><STRONG><a name="[18b]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[a2]"></a>vTaskSwitchContext</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1a7]"></a>vcom_bread</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, cdc_vcom.o(i.vcom_bread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vcom_bread
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilFunc_Usb_Task
</UL>

<P><STRONG><a name="[1a5]"></a>vcom_init</STRONG> (Thumb, 180 bytes, Stack size 96 bytes, cdc_vcom.o(i.vcom_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vcom_init &rArr; find_IntfDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_IntfDesc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilFunc_Usb_Task
</UL>

<P><STRONG><a name="[1a6]"></a>vcom_write</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cdc_vcom.o(i.vcom_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vcom_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilFunc_Usb_Task
</UL>

<P><STRONG><a name="[1b5]"></a>xPortStartScheduler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[de]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, queue.o(i.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Initial
</UL>

<P><STRONG><a name="[f9]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEventHandler_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appInputProc_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>

<P><STRONG><a name="[176]"></a>xQueueGenericReset</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_Decode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_HeadGet
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_DataGet
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[fd]"></a>xQueueGenericSend</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appInputProc_BufferInsert
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEvent_Send
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Master_Write
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Master_Read
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Read
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Read
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[f4]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_PulseInsert
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_IRQ_Handler
</UL>

<P><STRONG><a name="[114]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, queue.o(i.xQueueIsQueueEmptyFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>xQueueReceive</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appInputProc_Process
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Read
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_HeadGet
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInputCtrl_IR_DataGet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEventHandlerTask
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Read
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Write
</UL>

<P><STRONG><a name="[f6]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_IRQHandler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_IRQ_Handler
</UL>

<P><STRONG><a name="[fb]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Master_Write
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Master_Read
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Read
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Read
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Write
</UL>

<P><STRONG><a name="[19f]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterGet
</UL>

<P><STRONG><a name="[13d]"></a>xTaskCreateStatic</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEventHandler_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_Init
</UL>

<P><STRONG><a name="[1a1]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilDelayMs
</UL>

<P><STRONG><a name="[136]"></a>xTaskIncrementTick</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[187]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1c0]"></a>xTaskPriorityInherit</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[197]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[18d]"></a>xTaskResumeAll</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[96]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[46]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1f9]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1fa]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[73]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[77]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[173]"></a>halHdmiSwitcher_LED_Ctrl</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, halhdmiswitcher.o(i.halHdmiSwitcher_LED_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = halHdmiSwitcher_LED_Ctrl &rArr; Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halHdmiSwitcher_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halHdmiSwitcher_Ctrl
</UL>

<P><STRONG><a name="[15e]"></a>dvCard_Command_Read</STRONG> (Thumb, 298 bytes, Stack size 168 bytes, dvcard.o(i.dvCard_Command_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = dvCard_Command_Read &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_StateProcess
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_PacketBuild
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_State_Reset
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilDelayMs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterSet
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterGet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_System_Ready_Get
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Video_Timing_Get
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Video_Info_Get
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Video_Format_Get
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_System_Revision_Get
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Slot_Info_Get
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Audio_Info_Get
</UL>

<P><STRONG><a name="[165]"></a>dvCard_Command_Write</STRONG> (Thumb, 300 bytes, Stack size 168 bytes, dvcard.o(i.dvCard_Command_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = dvCard_Command_Write &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_StateProcess
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_PacketBuild
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_State_Reset
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilDelayMs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterSet
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCounterGet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Input_Port_Set
</UL>

<P><STRONG><a name="[4b]"></a>dvCard_Device_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dvcard.o(i.dvCard_Device_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = dvCard_Device_Read &rArr; Board_SSP_Master_Read &rArr; Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Master_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dvcard.o(i.dvCard_Initial)
</UL>
<P><STRONG><a name="[4a]"></a>dvCard_Device_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dvcard.o(i.dvCard_Device_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = dvCard_Device_Write &rArr; Board_SSP_Master_Write &rArr; Board_Gpio_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Master_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dvcard.o(i.dvCard_Initial)
</UL>
<P><STRONG><a name="[15f]"></a>dvCard_State_Reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dvcard.o(i.dvCard_State_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dvCard_State_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Command_Read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvCard_Initial
</UL>

<P><STRONG><a name="[131]"></a>GPIO_Interrupt_Handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, board_gpio.o(i.GPIO_Interrupt_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Interrupt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO6_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO5_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, board_gpio.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GpioInt_DeInit
</UL>

<P><STRONG><a name="[47]"></a>Board_Uart_IRQHandler</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, board_uart.o(i.Board_Uart_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Board_Uart_IRQHandler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueEmptyFromISR
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_ABIntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_uart.o(i.Board_Uart_Init)
</UL>
<P><STRONG><a name="[e1]"></a>Board_I2C_SlaveAdd_Set</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, board_i2c.o(i.Board_I2C_SlaveAdd_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Board_I2C_SlaveAdd_Set &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
</UL>

<P><STRONG><a name="[e8]"></a>Board_I2C_SlaveStateHandler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, board_i2c.o(i.Board_I2C_SlaveStateHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Board_I2C_SlaveStateHandler &rArr; RingBuffer_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Insert
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, board_i2c.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_SlaveStateHandler
</UL>

<P><STRONG><a name="[e7]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, board_i2c.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
</UL>

<P><STRONG><a name="[e5]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, board_i2c.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
</UL>

<P><STRONG><a name="[f2]"></a>Chip_SSP_GetRawIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board_spi.o(i.Chip_SSP_GetRawIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_IRQ_Handler
</UL>

<P><STRONG><a name="[f3]"></a>Chip_SSP_GetStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board_spi.o(i.Chip_SSP_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Master_Write
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Master_Read
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_IRQ_Handler
</UL>

<P><STRONG><a name="[10c]"></a>Chip_TIMER_CaptureFallingEdgeDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board_timer.o(i.Chip_TIMER_CaptureFallingEdgeDisable))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_Init
</UL>

<P><STRONG><a name="[10e]"></a>Chip_TIMER_CaptureFallingEdgeEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board_timer.o(i.Chip_TIMER_CaptureFallingEdgeEnable))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_Init
</UL>

<P><STRONG><a name="[13a]"></a>Chip_TIMER_CapturePending</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, board_timer.o(i.Chip_TIMER_CapturePending))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>Chip_TIMER_CaptureRisingEdgeDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board_timer.o(i.Chip_TIMER_CaptureRisingEdgeDisable))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_Init
</UL>

<P><STRONG><a name="[10d]"></a>Chip_TIMER_CaptureRisingEdgeEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board_timer.o(i.Chip_TIMER_CaptureRisingEdgeEnable))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_Init
</UL>

<P><STRONG><a name="[10a]"></a>Chip_TIMER_MatchEnableInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board_timer.o(i.Chip_TIMER_MatchEnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_Init
</UL>

<P><STRONG><a name="[13b]"></a>Chip_TIMER_MatchPending</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board_timer.o(i.Chip_TIMER_MatchPending))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>Chip_TIMER_ResetOnMatchEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board_timer.o(i.Chip_TIMER_ResetOnMatchEnable))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_Init
</UL>

<P><STRONG><a name="[110]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, board_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Timer_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>

<P><STRONG><a name="[1a3]"></a>utilEventDispatch</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, utileventhandler.o(i.utilEventDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = utilEventDispatch &rArr; appHdmiSwitcher_Switch_Input &rArr; halHdmiSwitcher_Ctrl &rArr; dvCard_System_Revision_Get &rArr; dvCard_Command_Read &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halHdmiSwitcher_Ctrl
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appHdmiSwitcher_Switch_Input
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appHdmiSwitcher_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Run_BootCode_Set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_State_Set
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_Card_Power_Set
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_OPS_Power_Set
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilDelayMs
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEventHandlerTask
</UL>

<P><STRONG><a name="[4f]"></a>utilEventHandlerTask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, utileventhandler.o(i.utilEventHandlerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = utilEventHandlerTask &rArr; utilEventDispatch &rArr; appHdmiSwitcher_Switch_Input &rArr; halHdmiSwitcher_Ctrl &rArr; dvCard_System_Revision_Get &rArr; dvCard_Command_Read &rArr; utilHost_StateProcess &rArr; utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEventDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utileventhandler.o(i.utilEventHandler_Init)
</UL>
<P><STRONG><a name="[1ab]"></a>utilHost_Ack_Build</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, utilhost.o(i.utilHost_Ack_Build))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utilHost_Ack_Build
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Packet_UnPack
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Cmd_Execute
</UL>

<P><STRONG><a name="[1aa]"></a>utilHost_CheckSumCalc</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, utilhost.o(i.utilHost_CheckSumCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utilHost_CheckSumCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_PacketBuild
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Cmd_Execute
</UL>

<P><STRONG><a name="[1a9]"></a>utilHost_Cmd_Execute</STRONG> (Thumb, 126 bytes, Stack size 128 bytes, utilhost.o(i.utilHost_Cmd_Execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = utilHost_Cmd_Execute &rArr; utilCLICmd_Execute &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLICmd_Execute
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_CheckSumCalc
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Ack_Build
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Packet_UnPack
</UL>

<P><STRONG><a name="[52]"></a>utilHost_Device_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, utilhost.o(i.utilHost_Device_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = utilHost_Device_Read &rArr; Board_SSP_Slave_Read &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilhost.o(i.utilHost_Init)
</UL>
<P><STRONG><a name="[51]"></a>utilHost_Device_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, utilhost.o(i.utilHost_Device_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = utilHost_Device_Write &rArr; Board_SSP_Slave_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilhost.o(i.utilHost_Init)
</UL>
<P><STRONG><a name="[1ad]"></a>utilHost_Package_Print</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, utilhost.o(i.utilHost_Package_Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = utilHost_Package_Print &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_StateProcess
</UL>

<P><STRONG><a name="[1a8]"></a>utilHost_Packet_UnPack</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, utilhost.o(i.utilHost_Packet_UnPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = utilHost_Packet_UnPack &rArr; utilHost_Cmd_Execute &rArr; utilCLICmd_Execute &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_StateProcess
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_StateReset
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Cmd_Execute
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Ack_Build
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHostHandlerTask
</UL>

<P><STRONG><a name="[1ac]"></a>utilHost_StateReset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utilhost.o(i.utilHost_StateReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utilHost_StateReset
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Packet_UnPack
</UL>

<P><STRONG><a name="[67]"></a>utilCLI_Go_To_Bootloader</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, utilclicmd.o(i.utilCLI_Go_To_Bootloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = utilCLI_Go_To_Bootloader &rArr; utilEvent_Send &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEvent_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>utilCLI_Input_AudioInfo_Get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utilclicmd.o(i.utilCLI_Input_AudioInfo_Get))
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>utilCLI_Input_Source_Set</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, utilclicmd.o(i.utilCLI_Input_Source_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = utilCLI_Input_Source_Set &rArr; utilEvent_Send &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEvent_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>utilCLI_Input_Video_Format_Get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utilclicmd.o(i.utilCLI_Input_Video_Format_Get))
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>utilCLI_Input_Video_Info_Get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utilclicmd.o(i.utilCLI_Input_Video_Info_Get))
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>utilCLI_Input_Video_Timing_Get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utilclicmd.o(i.utilCLI_Input_Video_Timing_Get))
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>utilCLI_OPS_Power_Get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, utilclicmd.o(i.utilCLI_OPS_Power_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = utilCLI_OPS_Power_Get &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_Card_Power_Status_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>utilCLI_OPS_Power_Set</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, utilclicmd.o(i.utilCLI_OPS_Power_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = utilCLI_OPS_Power_Set &rArr; utilEvent_Send &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEvent_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>utilCLI_System_Card_Power_Get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, utilclicmd.o(i.utilCLI_System_Card_Power_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = utilCLI_System_Card_Power_Get &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_Card_Power_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>utilCLI_System_Card_Present_Get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, utilclicmd.o(i.utilCLI_System_Card_Present_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = utilCLI_System_Card_Present_Get &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_Card_Present_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>utilCLI_System_Ready_Get</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, utilclicmd.o(i.utilCLI_System_Ready_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = utilCLI_System_Ready_Get &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appSysProc_State_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>utilCLI_System_Slot_Info_Get</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, utilclicmd.o(i.utilCLI_System_Slot_Info_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = utilCLI_System_Slot_Info_Get &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_Slot_Info_Get
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>utilCLI_System_Slot_Power_Set</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, utilclicmd.o(i.utilCLI_System_Slot_Power_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = utilCLI_System_Slot_Power_Set &rArr; utilEvent_Send &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilEvent_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>utilCLI_System_Slot_Ready_Get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, utilclicmd.o(i.utilCLI_System_Slot_Ready_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = utilCLI_System_Slot_Ready_Get &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halCard_Slot_Ready_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>utilCLI_System_Version_Get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, utilclicmd.o(i.utilCLI_System_Version_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = utilCLI_System_Version_Get &rArr; utilLog_Printf &rArr; Board_Uart_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>CDC_ep0_override_hdlr</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, cdc_vcom.o(i.CDC_ep0_override_hdlr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CDC_ep0_override_hdlr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(i.vcom_init)
</UL>
<P><STRONG><a name="[1b8]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cdc_vcom.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_bread
</UL>

<P><STRONG><a name="[1b9]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cdc_vcom.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_bread
</UL>

<P><STRONG><a name="[55]"></a>VCOM_SetLineCode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cdc_vcom.o(i.VCOM_SetLineCode))
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(i.vcom_init)
</UL>
<P><STRONG><a name="[57]"></a>VCOM_bulk_in_hdlr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cdc_vcom.o(i.VCOM_bulk_in_hdlr))
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(i.vcom_init)
</UL>
<P><STRONG><a name="[58]"></a>VCOM_bulk_out_hdlr</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, cdc_vcom.o(i.VCOM_bulk_out_hdlr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VCOM_bulk_out_hdlr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(i.vcom_init)
</UL>
<P><STRONG><a name="[185]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[186]"></a>prvCopyDataToQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[1c1]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[18e]"></a>prvInitialiseMutex</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>

<P><STRONG><a name="[18f]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[194]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[195]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[196]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[17d]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[181]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[188]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[18a]"></a>prvGetExpectedIdleTime</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tasks.o(i.prvGetExpectedIdleTime))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[54]"></a>prvIdleTask</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvIdleTask &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetExpectedIdleTime
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[190]"></a>prvInitialiseNewTask</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[183]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1b6]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>

<P><STRONG><a name="[12b]"></a>Chip_USB_PllSetup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, chip_18xx_43xx.o(i.Chip_USB_PllSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Chip_USB_PllSetup &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupPLL
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetPLLStatus
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB0_Init
</UL>

<P><STRONG><a name="[11e]"></a>Chip_Clock_GetDivRate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetDivRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = Chip_Clock_GetDivRate &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDividerSource
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDividerDivisor
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>

<P><STRONG><a name="[121]"></a>i2cm_getClkId</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2cm_18xx_43xx.o(i.i2cm_getClkId))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_SetBusSpeed
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2CM_DeInit
</UL>

<P><STRONG><a name="[124]"></a>Chip_SSP_GetClockIndex</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssp_18xx_43xx.o(i.Chip_SSP_GetClockIndex))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_SetBitRate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_DeInit
</UL>

<P><STRONG><a name="[126]"></a>Chip_SSP_GetRawIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssp_18xx_43xx.o(i.Chip_SSP_GetRawIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_WriteFrames_Blocking
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_ReadFrames_Blocking
</UL>

<P><STRONG><a name="[125]"></a>Chip_SSP_GetStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssp_18xx_43xx.o(i.Chip_SSP_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_WriteFrames_Blocking
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_ReadFrames_Blocking
</UL>

<P><STRONG><a name="[127]"></a>Chip_TIMER_GetClockIndex</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer_18xx_43xx.o(i.Chip_TIMER_GetClockIndex))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_DeInit
</UL>

<P><STRONG><a name="[128]"></a>Chip_UART_GetIndex</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uart_18xx_43xx.o(i.Chip_UART_GetIndex))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaudFDR
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_DeInit
</UL>

<P><STRONG><a name="[135]"></a>RingBuffer_IsEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ring_buffer.o(i.RingBuffer_IsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
</UL>

<P><STRONG><a name="[133]"></a>RingBuffer_IsFull</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ring_buffer.o(i.RingBuffer_IsFull))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Insert
</UL>

<P><STRONG><a name="[4e]"></a>prvTaskExitError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[45]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
