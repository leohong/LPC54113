<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\CORE_M4\bootcode.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\CORE_M4\bootcode.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Mar 31 16:38:14 2020
<BR><P>
<H3>Maximum Stack Usage =       1120 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
utilHostHandlerTask &rArr;  utilHostHandlerTask (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[71]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">DebugMon_Handler</a><BR>
 <LI><a href="#[a]">UnHandled_Vector</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">UnHandled_Vector</a><BR>
 <LI><a href="#[1f]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC0_IRQHandler</a><BR>
 <LI><a href="#[a3]">Chip_Clock_GetMainPLLHz</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a2]">Chip_Clock_GetClockInputHz</a><BR>
 <LI><a href="#[a4]">Chip_Clock_GetDivRate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a2]">Chip_Clock_GetClockInputHz</a><BR>
 <LI><a href="#[48]">utilHostHandlerTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">utilHostHandlerTask</a><BR>
 <LI><a href="#[68]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[23]">ADC1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[3a]">ADCHS_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[3b]">ATIMER_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[43]">Board_Uart_IRQHandler</a> from board_uart.o(i.Board_Uart_IRQHandler) referenced from board_uart.o(i.Board_Uart_Init)
 <LI><a href="#[8]">BusFault_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[3f]">CAN0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[39]">CAN1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[f]">DAC_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[11]">DMA_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[13]">ETH_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[38]">EVRT_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[12]">FLASH_EEPROM_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[36]">GINT0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[37]">GINT1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2e]">GPIO0_IRQHandler</a> from board_gpio.o(i.GPIO0_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2f]">GPIO1_IRQHandler</a> from board_gpio.o(i.GPIO1_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[30]">GPIO2_IRQHandler</a> from board_gpio.o(i.GPIO2_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[31]">GPIO3_IRQHandler</a> from board_gpio.o(i.GPIO3_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[32]">GPIO4_IRQHandler</a> from board_gpio.o(i.GPIO4_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[33]">GPIO5_IRQHandler</a> from board_gpio.o(i.GPIO5_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[34]">GPIO6_IRQHandler</a> from board_gpio.o(i.GPIO6_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[35]">GPIO7_IRQHandler</a> from board_gpio.o(i.GPIO7_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[20]">I2C0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[21]">I2C1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2a]">I2S0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2b]">I2S1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[15]">LCD_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[10]">M0APP_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[3e]">M0SUB_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[1e]">MCPWM_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from port.o(.emb_text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[40]">QEI_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[19]">RIT_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[3c]">RTC_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[18]">SCT_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[14]">SDIO_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2d]">SGPIO_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[2c]">SPIFI_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[22]">SPI_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[24]">SSP0_IRQHandler</a> from board_spi.o(i.SSP0_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[25]">SSP1_IRQHandler</a> from board_spi.o(i.SSP1_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from port.o(.emb_text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[41]">SystemInit</a> from sysinit.o(i.SystemInit) referenced from keil_startup_lpc18xx43xx.o(.text)
 <LI><a href="#[1a]">TIMER0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[1b]">TIMER1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[1c]">TIMER2_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[1d]">TIMER3_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[26]">UART0_IRQHandler</a> from board_uart.o(i.UART0_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[27]">UART1_IRQHandler</a> from board_uart.o(i.UART1_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[28]">UART2_IRQHandler</a> from board_uart.o(i.UART2_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[29]">UART3_IRQHandler</a> from board_uart.o(i.UART3_IRQHandler) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[16]">USB0_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[17]">USB1_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[a]">UnHandled_Vector</a> from keil_startup_lpc18xx43xx.o(.text) referenced 7 times from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[3d]">WDT_IRQHandler</a> from keil_startup_lpc18xx43xx.o(.text) referenced from keil_startup_lpc18xx43xx.o(RESET)
 <LI><a href="#[57]">__main</a> from __main.o(!!!main) referenced from keil_startup_lpc18xx43xx.o(.text)
 <LI><a href="#[44]">appIapProc_Task</a> from appiapproc.o(i.appIapProc_Task) referenced from appiapproc.o(i.appIapProc_Init)
 <LI><a href="#[49]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[45]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[4d]">utilCLI_AppVersion_Get</a> from utilclicmd.o(i.utilCLI_AppVersion_Get) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[4e]">utilCLI_AppVersion_Set</a> from utilclicmd.o(i.utilCLI_AppVersion_Set) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[4c]">utilCLI_Go_To_Bootloader</a> from utilclicmd.o(i.utilCLI_Go_To_Bootloader) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[50]">utilCLI_IAP_APP_INFO_Set</a> from utilclicmd.o(i.utilCLI_IAP_APP_INFO_Set) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[51]">utilCLI_IAP_Bin_Address_Set</a> from utilclicmd.o(i.utilCLI_IAP_Bin_Address_Set) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[53]">utilCLI_IAP_Bin_Data_Checksum_Get</a> from utilclicmd.o(i.utilCLI_IAP_Bin_Data_Checksum_Get) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[54]">utilCLI_IAP_Bin_Data_Program_Set</a> from utilclicmd.o(i.utilCLI_IAP_Bin_Data_Program_Set) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[52]">utilCLI_IAP_Bin_Data_Set</a> from utilclicmd.o(i.utilCLI_IAP_Bin_Data_Set) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[4f]">utilCLI_IAP_Enable_Set</a> from utilclicmd.o(i.utilCLI_IAP_Enable_Set) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[55]">utilCLI_IAP_Program_Finish_Set</a> from utilclicmd.o(i.utilCLI_IAP_Program_Finish_Set) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[56]">utilCLI_IAP_Run_App_Set</a> from utilclicmd.o(i.utilCLI_IAP_Run_App_Set) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[4b]">utilCLI_System_Ready_Get</a> from utilclicmd.o(i.utilCLI_System_Ready_Get) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[4a]">utilCLI_System_Version_Get</a> from utilclicmd.o(i.utilCLI_System_Version_Get) referenced from utilclicmd.o(.constdata)
 <LI><a href="#[48]">utilHostHandlerTask</a> from utilhost.o(i.utilHostHandlerTask) referenced from utilhost.o(i.utilHost_Init)
 <LI><a href="#[47]">utilHost_Device_Read</a> from utilhost.o(i.utilHost_Device_Read) referenced from utilhost.o(i.utilHost_Init)
 <LI><a href="#[46]">utilHost_Device_Write</a> from utilhost.o(i.utilHost_Device_Write) referenced from utilhost.o(i.utilHost_Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[57]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ff]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[100]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[101]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[102]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[103]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[61]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[5c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[104]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[105]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[106]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[107]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[108]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[109]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[110]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[111]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[112]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[113]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[114]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[115]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[116]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[117]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[66]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[118]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[119]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[11a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[11b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[11c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[11d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[11e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[5a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[11f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[5e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[60]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[120]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[62]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; appIapProc_Init &rArr; Board_Init &rArr; Board_Uart_Init &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[121]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[72]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[65]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[122]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[67]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[f8]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[123]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UnHandled_Vector</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnHandled_Vector
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnHandled_Vector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ADCHS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ATIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EVRT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_EEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>GINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>GINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2S1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>M0APP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>M0SUB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SGPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>USB1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc18xx43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, keil_startup_lpc18xx43xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaudFDR
</UL>

<P><STRONG><a name="[124]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Cmd_Execute
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[6a]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[125]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Run_AppCode_Set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Programing_Finish
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Programing
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_StateReset
</UL>

<P><STRONG><a name="[6e]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[6d]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[129]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[64]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[130]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>Board_Clock_Init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, board_clock.o(i.Board_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Board_Clock_Init &rArr; Chip_Clock_SetupMainPLLHz &rArr; Chip_Clock_SetupMainPLLMult &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupMainPLLHz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetBaseClock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_MainPLLLocked
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnableCrystal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_DisableMainPLL
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_DisableCrystal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7b]"></a>Board_Gpio_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, board_gpio.o(i.Board_Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Board_Gpio_Init &rArr; Board_Gpio_PinMux &rArr; Board_Gpio_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_PinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[7c]"></a>Board_Gpio_PinMux</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, board_gpio.o(i.Board_Gpio_PinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Board_Gpio_PinMux &rArr; Board_Gpio_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIR
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Init
</UL>

<P><STRONG><a name="[7e]"></a>Board_Gpio_Set</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, board_gpio.o(i.Board_Gpio_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Board_Gpio_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_PinMux
</UL>

<P><STRONG><a name="[81]"></a>Board_IAP_Addr_To_Sector</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, board_iap.o(i.Board_IAP_Addr_To_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Board_IAP_Addr_To_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_IAP_Write
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_IAP_Erase
</UL>

<P><STRONG><a name="[7f]"></a>Board_IAP_Erase</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, board_iap.o(i.Board_IAP_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Board_IAP_Erase &rArr; Chip_IAP_PreSectorForReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_PreSectorForReadWrite
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_EraseSector
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_IAP_Addr_To_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_IAP_Enable
</UL>

<P><STRONG><a name="[b5]"></a>Board_IAP_Initial</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, board_iap.o(i.Board_IAP_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Board_IAP_Initial
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_IAP_Enable
</UL>

<P><STRONG><a name="[85]"></a>Board_IAP_Write</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, board_iap.o(i.Board_IAP_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Board_IAP_Write &rArr; Chip_IAP_PreSectorForReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_PreSectorForReadWrite
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_CopyRamToFlash
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_IAP_Addr_To_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Programing_Finish
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Programing
</UL>

<P><STRONG><a name="[87]"></a>Board_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, board.o(i.Board_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Board_Init &rArr; Board_Uart_Init &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Init
</UL>

<P><STRONG><a name="[8a]"></a>Board_SSP_IRQ_Handler</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, board_spi.o(i.Board_SSP_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Board_SSP_IRQ_Handler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaitingFromISR
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_GetStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_GetRawIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>Board_SSP_Init</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, board_spi.o(i.Board_SSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Board_SSP_Init &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_SetBitRate
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[94]"></a>Board_SSP_Slave_Read</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, board_spi.o(i.Board_SSP_Slave_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Board_SSP_Slave_Read &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Device_Read
</UL>

<P><STRONG><a name="[98]"></a>Board_SSP_Slave_Write</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, board_spi.o(i.Board_SSP_Slave_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Board_SSP_Slave_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Device_Write
</UL>

<P><STRONG><a name="[88]"></a>Board_Uart_Init</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, board_uart.o(i.Board_Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Board_Uart_Init &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaudFDR
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_RGU_TriggerReset
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_RGU_InReset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[75]"></a>Chip_Clock_DisableCrystal</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_DisableCrystal))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Clock_Init
</UL>

<P><STRONG><a name="[76]"></a>Chip_Clock_DisableMainPLL</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_DisableMainPLL))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Clock_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupMainPLLMult
</UL>

<P><STRONG><a name="[ac]"></a>Chip_Clock_Enable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_Init
</UL>

<P><STRONG><a name="[77]"></a>Chip_Clock_EnableCrystal</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_EnableCrystal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_Clock_EnableCrystal
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Clock_Init
</UL>

<P><STRONG><a name="[ae]"></a>Chip_Clock_EnableOpts</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_EnableOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_Clock_EnableOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>

<P><STRONG><a name="[a1]"></a>Chip_Clock_GetBaseClock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetBaseClock))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetBaseClocktHz
</UL>

<P><STRONG><a name="[a0]"></a>Chip_Clock_GetBaseClocktHz</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetBaseClocktHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetBaseClock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetRate
</UL>

<P><STRONG><a name="[a2]"></a>Chip_Clock_GetClockInputHz</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetClockInputHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainPLLHz
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDivRate
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupMainPLLHz
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupMainPLLMult
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainPLLHz
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetBaseClocktHz
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDivRate
</UL>

<P><STRONG><a name="[a6]"></a>Chip_Clock_GetDividerDivisor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetDividerDivisor))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDivRate
</UL>

<P><STRONG><a name="[a5]"></a>Chip_Clock_GetDividerSource</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetDividerSource))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDivRate
</UL>

<P><STRONG><a name="[a3]"></a>Chip_Clock_GetMainPLLHz</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetMainPLLHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>

<P><STRONG><a name="[a7]"></a>Chip_Clock_GetRate</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetBaseClocktHz
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaudFDR
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_SetBitRate
</UL>

<P><STRONG><a name="[79]"></a>Chip_Clock_MainPLLLocked</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_MainPLLLocked))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Clock_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupMainPLLMult
</UL>

<P><STRONG><a name="[74]"></a>Chip_Clock_SetBaseClock</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, clock_18xx_43xx.o(i.Chip_Clock_SetBaseClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_Clock_SetBaseClock
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Clock_Init
</UL>

<P><STRONG><a name="[78]"></a>Chip_Clock_SetupMainPLLHz</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, clock_18xx_43xx.o(i.Chip_Clock_SetupMainPLLHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Chip_Clock_SetupMainPLLHz &rArr; Chip_Clock_SetupMainPLLMult &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupMainPLLMult
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_TestMainPLLMultiplier
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Clock_Init
</UL>

<P><STRONG><a name="[a9]"></a>Chip_Clock_SetupMainPLLMult</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, clock_18xx_43xx.o(i.Chip_Clock_SetupMainPLLMult))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Chip_Clock_SetupMainPLLMult &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_MainPLLLocked
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_DisableMainPLL
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupMainPLLHz
</UL>

<P><STRONG><a name="[7d]"></a>Chip_GPIO_SetPinDIR</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpio_18xx_43xx.o(i.Chip_GPIO_SetPinDIR))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Gpio_PinMux
</UL>

<P><STRONG><a name="[86]"></a>Chip_IAP_CopyRamToFlash</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, iap_18xx_43xx.o(i.Chip_IAP_CopyRamToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Chip_IAP_CopyRamToFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_IAP_Write
</UL>

<P><STRONG><a name="[84]"></a>Chip_IAP_EraseSector</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, iap_18xx_43xx.o(i.Chip_IAP_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Chip_IAP_EraseSector
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_IAP_Erase
</UL>

<P><STRONG><a name="[83]"></a>Chip_IAP_PreSectorForReadWrite</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, iap_18xx_43xx.o(i.Chip_IAP_PreSectorForReadWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Chip_IAP_PreSectorForReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_IAP_Write
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_IAP_Erase
</UL>

<P><STRONG><a name="[9d]"></a>Chip_RGU_InReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rgu_18xx_43xx.o(i.Chip_RGU_InReset))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Init
</UL>

<P><STRONG><a name="[9c]"></a>Chip_RGU_TriggerReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rgu_18xx_43xx.o(i.Chip_RGU_TriggerReset))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Init
</UL>

<P><STRONG><a name="[90]"></a>Chip_SSP_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ssp_18xx_43xx.o(i.Chip_SSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Chip_SSP_Init &rArr; Chip_SSP_SetBitRate &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_SetBitRate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_GetClockIndex
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Init
</UL>

<P><STRONG><a name="[91]"></a>Chip_SSP_SetBitRate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ssp_18xx_43xx.o(i.Chip_SSP_SetBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Chip_SSP_SetBitRate &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_GetClockIndex
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetRate
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_Init
</UL>

<P><STRONG><a name="[131]"></a>Chip_SSP_SetClockRate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssp_18xx_43xx.o(i.Chip_SSP_SetClockRate), UNUSED)

<P><STRONG><a name="[9b]"></a>Chip_UART_ABIntHandler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, uart_18xx_43xx.o(i.Chip_UART_ABIntHandler))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>Chip_UART_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart_18xx_43xx.o(i.Chip_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chip_UART_Init &rArr; Chip_Clock_EnableOpts
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_GetIndex
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnableOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Init
</UL>

<P><STRONG><a name="[9f]"></a>Chip_UART_SetBaudFDR</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, uart_18xx_43xx.o(i.Chip_UART_SetBaudFDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Chip_UART_SetBaudFDR &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_GetIndex
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetRate
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Init
</UL>

<P><STRONG><a name="[2e]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_gpio.o(i.GPIO0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO0_IRQHandler &rArr; GPIO_Interrupt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_gpio.o(i.GPIO1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO1_IRQHandler &rArr; GPIO_Interrupt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>GPIO2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_gpio.o(i.GPIO2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO2_IRQHandler &rArr; GPIO_Interrupt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>GPIO3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_gpio.o(i.GPIO3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO3_IRQHandler &rArr; GPIO_Interrupt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>GPIO4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_gpio.o(i.GPIO4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO4_IRQHandler &rArr; GPIO_Interrupt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>GPIO5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_gpio.o(i.GPIO5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO5_IRQHandler &rArr; GPIO_Interrupt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>GPIO6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_gpio.o(i.GPIO6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO6_IRQHandler &rArr; GPIO_Interrupt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>GPIO7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_gpio.o(i.GPIO7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SSP0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_spi.o(i.SSP0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SSP0_IRQHandler &rArr; Board_SSP_IRQ_Handler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SSP1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_spi.o(i.SSP1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SSP1_IRQHandler &rArr; Board_SSP_IRQ_Handler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, chip_18xx_43xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemCoreClockUpdate &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetRate
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Clock_Init
</UL>

<P><STRONG><a name="[41]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sysinit.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SystemInit &rArr; Board_Clock_Init &rArr; Chip_Clock_SetupMainPLLHz &rArr; Chip_Clock_SetupMainPLLMult &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpuInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Clock_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>UART0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board_uart.o(i.UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board_uart.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>UART2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board_uart.o(i.UART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>UART3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board_uart.o(i.UART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc18xx43xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>__user_heap_extend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, freertoscommonhooks.o(i.__user_heap_extend), UNUSED, KEPT)

<P><STRONG><a name="[68]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utillog.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[de]"></a>appIapProc_AppBinInfo_Set</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, appiapproc.o(i.appIapProc_AppBinInfo_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = appIapProc_AppBinInfo_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_IAP_APP_INFO_Set
</UL>

<P><STRONG><a name="[dc]"></a>appIapProc_AppCode_Version_Get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appiapproc.o(i.appIapProc_AppCode_Version_Get))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_AppVersion_Get
</UL>

<P><STRONG><a name="[dd]"></a>appIapProc_AppCode_Version_Set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appiapproc.o(i.appIapProc_AppCode_Version_Set))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_AppVersion_Set
</UL>

<P><STRONG><a name="[df]"></a>appIapProc_Bin_Address</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, appiapproc.o(i.appIapProc_Bin_Address))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_IAP_Bin_Address_Set
</UL>

<P><STRONG><a name="[e1]"></a>appIapProc_Bin_Data</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, appiapproc.o(i.appIapProc_Bin_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = appIapProc_Bin_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_IAP_Bin_Data_Set
</UL>

<P><STRONG><a name="[e0]"></a>appIapProc_CheckSum_Get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, appiapproc.o(i.appIapProc_CheckSum_Get))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_IAP_Bin_Data_Checksum_Get
</UL>

<P><STRONG><a name="[b4]"></a>appIapProc_IAP_Enable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, appiapproc.o(i.appIapProc_IAP_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = appIapProc_IAP_Enable &rArr; Board_IAP_Erase &rArr; Chip_IAP_PreSectorForReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_IAP_Initial
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_IAP_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_IAP_Enable_Set
</UL>

<P><STRONG><a name="[b6]"></a>appIapProc_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, appiapproc.o(i.appIapProc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = appIapProc_Init &rArr; Board_Init &rArr; Board_Uart_Init &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Run_AppCode_Set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>appIapProc_Programing</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, appiapproc.o(i.appIapProc_Programing))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = appIapProc_Programing &rArr; Board_IAP_Write &rArr; Chip_IAP_PreSectorForReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_IAP_Write
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_IAP_Bin_Data_Program_Set
</UL>

<P><STRONG><a name="[be]"></a>appIapProc_Programing_Finish</STRONG> (Thumb, 92 bytes, Stack size 528 bytes, appiapproc.o(i.appIapProc_Programing_Finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = appIapProc_Programing_Finish &rArr; Board_IAP_Write &rArr; Chip_IAP_PreSectorForReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_IAP_Write
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_IAP_Program_Finish_Set
</UL>

<P><STRONG><a name="[bc]"></a>appIapProc_Run_AppCode_Set</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, appiapproc.o(i.appIapProc_Run_AppCode_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = appIapProc_Run_AppCode_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Task
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Init
</UL>

<P><STRONG><a name="[e2]"></a>appIapProc_Run_App_Flag_Set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appiapproc.o(i.appIapProc_Run_App_Flag_Set))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLI_IAP_Run_App_Set
</UL>

<P><STRONG><a name="[44]"></a>appIapProc_Task</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, appiapproc.o(i.appIapProc_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = appIapProc_Task &rArr; utilDelayMs &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilDelayMs
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Run_AppCode_Set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Verify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appiapproc.o(i.appIapProc_Init)
</UL>
<P><STRONG><a name="[ef]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[b3]"></a>fpuInit</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, fpu_init.o(i.fpuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fpuInit
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[63]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = main &rArr; appIapProc_Init &rArr; Board_Init &rArr; Board_Uart_Init &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[fc]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[d5]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[e7]"></a>utilCLICmd_Execute</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, utilclicmd.o(i.utilCLICmd_Execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = utilCLICmd_Execute
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Cmd_Execute
</UL>

<P><STRONG><a name="[bf]"></a>utilDelayMs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, utilcounter.o(i.utilDelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = utilDelayMs &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Task
</UL>

<P><STRONG><a name="[48]"></a>utilHostHandlerTask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utilhost.o(i.utilHostHandlerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + In Cycle
<LI>Call Chain = utilHostHandlerTask &rArr;  utilHostHandlerTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHostHandlerTask
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Packet_UnPack
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHostHandlerTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilhost.o(i.utilHost_Init)
</UL>
<P><STRONG><a name="[b9]"></a>utilHost_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, utilhost.o(i.utilHost_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = utilHost_Init &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_StateReset
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Init
</UL>

<P><STRONG><a name="[eb]"></a>utilHost_StateProcess</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, utilhost.o(i.utilHost_StateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = utilHost_StateProcess &rArr; vTaskSuspend &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Package_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Packet_UnPack
</UL>

<P><STRONG><a name="[b8]"></a>utilLog_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, utillog.o(i.utilLog_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = utilLog_Init &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Init
</UL>

<P><STRONG><a name="[c1]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[99]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, queue.o(i.uxQueueMessagesWaiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uxQueueMessagesWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Write
</UL>

<P><STRONG><a name="[8e]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(i.uxQueueMessagesWaitingFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_IRQ_Handler
</UL>

<P><STRONG><a name="[f3]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utiltask.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[cb]"></a>vApplicationIdleHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, freertoscommonhooks.o(i.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[f6]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, freertoscommonhooks.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[d6]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[d4]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[c3]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[c2]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[80]"></a>vPortEnterCritical</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_IAP_Write
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_IAP_Erase
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[82]"></a>vPortExitCritical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_IAP_Write
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_IAP_Erase
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[f7]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[ce]"></a>vPortSuppressTicksAndSleep</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, port.o(i.vPortSuppressTicksAndSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPortSuppressTicksAndSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[e4]"></a>vTaskDelayUntil</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tasks.o(i.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilDelayMs
</UL>

<P><STRONG><a name="[fa]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[db]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[f1]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[f2]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[bb]"></a>vTaskStartScheduler</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Init
</UL>

<P><STRONG><a name="[f0]"></a>vTaskStepTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskStepTick))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[ec]"></a>vTaskSuspend</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, tasks.o(i.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskSuspend &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_StateProcess
</UL>

<P><STRONG><a name="[cd]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[69]"></a>vTaskSwitchContext</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[f4]"></a>xPortStartScheduler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[93]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, queue.o(i.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilLog_Init
</UL>

<P><STRONG><a name="[92]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>

<P><STRONG><a name="[d2]"></a>xQueueGenericReset</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[97]"></a>xQueueGenericSend</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Read
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[8d]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_IRQ_Handler
</UL>

<P><STRONG><a name="[9a]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, queue.o(i.xQueueIsQueueEmptyFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>xQueueReceive</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Read
</UL>

<P><STRONG><a name="[8f]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_IRQ_Handler
</UL>

<P><STRONG><a name="[95]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Read
</UL>

<P><STRONG><a name="[fb]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[ba]"></a>xTaskCreateStatic</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Init
</UL>

<P><STRONG><a name="[e3]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilDelayMs
</UL>

<P><STRONG><a name="[b2]"></a>xTaskIncrementTick</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[c9]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[fd]"></a>xTaskPriorityInherit</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[da]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[cf]"></a>xTaskResumeAll</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[5d]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[132]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[133]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b7]"></a>appIapProc_Verify</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, appiapproc.o(i.appIapProc_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = appIapProc_Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Task
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Init
</UL>

<P><STRONG><a name="[b0]"></a>GPIO_Interrupt_Handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, board_gpio.o(i.GPIO_Interrupt_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Interrupt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO6_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO5_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, board_gpio.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Handler
</UL>

<P><STRONG><a name="[8b]"></a>Chip_SSP_GetRawIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board_spi.o(i.Chip_SSP_GetRawIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_IRQ_Handler
</UL>

<P><STRONG><a name="[8c]"></a>Chip_SSP_GetStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board_spi.o(i.Chip_SSP_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Write
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_IRQ_Handler
</UL>

<P><STRONG><a name="[43]"></a>Board_Uart_IRQHandler</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, board_uart.o(i.Board_Uart_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Board_Uart_IRQHandler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueEmptyFromISR
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_ABIntHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_uart.o(i.Board_Uart_Init)
</UL>
<P><STRONG><a name="[4d]"></a>utilCLI_AppVersion_Get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, utilclicmd.o(i.utilCLI_AppVersion_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utilCLI_AppVersion_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_AppCode_Version_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>utilCLI_AppVersion_Set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, utilclicmd.o(i.utilCLI_AppVersion_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utilCLI_AppVersion_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_AppCode_Version_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>utilCLI_Go_To_Bootloader</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utilclicmd.o(i.utilCLI_Go_To_Bootloader))
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>utilCLI_IAP_APP_INFO_Set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utilclicmd.o(i.utilCLI_IAP_APP_INFO_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = utilCLI_IAP_APP_INFO_Set &rArr; appIapProc_AppBinInfo_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_AppBinInfo_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>utilCLI_IAP_Bin_Address_Set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, utilclicmd.o(i.utilCLI_IAP_Bin_Address_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utilCLI_IAP_Bin_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Bin_Address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>utilCLI_IAP_Bin_Data_Checksum_Get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, utilclicmd.o(i.utilCLI_IAP_Bin_Data_Checksum_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utilCLI_IAP_Bin_Data_Checksum_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_CheckSum_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>utilCLI_IAP_Bin_Data_Program_Set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, utilclicmd.o(i.utilCLI_IAP_Bin_Data_Program_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = utilCLI_IAP_Bin_Data_Program_Set &rArr; appIapProc_Programing &rArr; Board_IAP_Write &rArr; Chip_IAP_PreSectorForReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Programing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>utilCLI_IAP_Bin_Data_Set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, utilclicmd.o(i.utilCLI_IAP_Bin_Data_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = utilCLI_IAP_Bin_Data_Set &rArr; appIapProc_Bin_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Bin_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>utilCLI_IAP_Enable_Set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, utilclicmd.o(i.utilCLI_IAP_Enable_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = utilCLI_IAP_Enable_Set &rArr; appIapProc_IAP_Enable &rArr; Board_IAP_Erase &rArr; Chip_IAP_PreSectorForReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_IAP_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>utilCLI_IAP_Program_Finish_Set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utilclicmd.o(i.utilCLI_IAP_Program_Finish_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = utilCLI_IAP_Program_Finish_Set &rArr; appIapProc_Programing_Finish &rArr; Board_IAP_Write &rArr; Chip_IAP_PreSectorForReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Programing_Finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>utilCLI_IAP_Run_App_Set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, utilclicmd.o(i.utilCLI_IAP_Run_App_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utilCLI_IAP_Run_App_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appIapProc_Run_App_Flag_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>utilCLI_System_Ready_Get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utilclicmd.o(i.utilCLI_System_Ready_Get))
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>utilCLI_System_Version_Get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, utilclicmd.o(i.utilCLI_System_Version_Get))
<BR>[Address Reference Count : 1]<UL><LI> utilclicmd.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>utilHost_Ack_Build</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, utilhost.o(i.utilHost_Ack_Build))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utilHost_Ack_Build
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Packet_UnPack
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Cmd_Execute
</UL>

<P><STRONG><a name="[e8]"></a>utilHost_CheckSumCalc</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, utilhost.o(i.utilHost_CheckSumCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utilHost_CheckSumCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Cmd_Execute
</UL>

<P><STRONG><a name="[e6]"></a>utilHost_Cmd_Execute</STRONG> (Thumb, 132 bytes, Stack size 1088 bytes, utilhost.o(i.utilHost_Cmd_Execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = utilHost_Cmd_Execute &rArr; utilCLICmd_Execute
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_CheckSumCalc
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Ack_Build
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilCLICmd_Execute
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Packet_UnPack
</UL>

<P><STRONG><a name="[47]"></a>utilHost_Device_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, utilhost.o(i.utilHost_Device_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = utilHost_Device_Read &rArr; Board_SSP_Slave_Read &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilhost.o(i.utilHost_Init)
</UL>
<P><STRONG><a name="[46]"></a>utilHost_Device_Write</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, utilhost.o(i.utilHost_Device_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = utilHost_Device_Write &rArr; Board_SSP_Slave_Write &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP_Slave_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilhost.o(i.utilHost_Init)
</UL>
<P><STRONG><a name="[ed]"></a>utilHost_Package_Print</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, utilhost.o(i.utilHost_Package_Print))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_StateProcess
</UL>

<P><STRONG><a name="[e5]"></a>utilHost_Packet_UnPack</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, utilhost.o(i.utilHost_Packet_UnPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = utilHost_Packet_UnPack &rArr; utilHost_Cmd_Execute &rArr; utilCLICmd_Execute
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_StateProcess
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_StateReset
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Cmd_Execute
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Ack_Build
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHostHandlerTask
</UL>

<P><STRONG><a name="[ea]"></a>utilHost_StateReset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, utilhost.o(i.utilHost_StateReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utilHost_StateReset
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilHost_Packet_UnPack
</UL>

<P><STRONG><a name="[c6]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[c8]"></a>prvCopyDataToQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[fe]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[d0]"></a>prvInitialiseMutex</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>

<P><STRONG><a name="[d1]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[d7]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[d8]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[d9]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[c0]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[c4]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[ca]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[cc]"></a>prvGetExpectedIdleTime</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tasks.o(i.prvGetExpectedIdleTime))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[49]"></a>prvIdleTask</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvIdleTask &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetExpectedIdleTime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[d3]"></a>prvInitialiseNewTask</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[c5]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[f5]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>

<P><STRONG><a name="[45]"></a>prvTaskExitError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[a4]"></a>Chip_Clock_GetDivRate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetDivRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = Chip_Clock_GetDivRate &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDividerSource
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDividerDivisor
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>

<P><STRONG><a name="[a8]"></a>Chip_Clock_TestMainPLLMultiplier</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_TestMainPLLMultiplier))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupMainPLLHz
</UL>

<P><STRONG><a name="[ab]"></a>Chip_SSP_GetClockIndex</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssp_18xx_43xx.o(i.Chip_SSP_GetClockIndex))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_SetBitRate
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SSP_Init
</UL>

<P><STRONG><a name="[ad]"></a>Chip_UART_GetIndex</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uart_18xx_43xx.o(i.Chip_UART_GetIndex))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaudFDR
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>

<P><STRONG><a name="[aa]"></a>iap_entry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iap_18xx_43xx.o(i.iap_entry))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_PreSectorForReadWrite
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_EraseSector
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_CopyRamToFlash
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
